{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["config","displayModeBar","staticPlot","ENDORSEMENTS_URL","process","fetchData","a","Promise","resolve","reject","Plotly","csv","err","rows","App","csvData","useAsync","promiseFn","data","error","useState","checkboxState","setCheckboxState","handleChange","event","target","name","checked","d","yes","x","y","orientation","marker","color","width","type","no","items","i","Object","keys","forEach","key","vote","length","console","log","sort","reverse","results","resultType","value","push","mungeData","className","Grid","container","spacing","item","xs","FormLabel","component","FormGroup","map","endorser","FormControlLabel","control","Checkbox","onChange","label","layout","title","barmode","height","yaxis","automargin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.434b7407.chunk.js","sourcesContent":["import * as Plotly from \"plotly.js\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { useAsync } from \"react-async\";\nimport Plot from \"react-plotly.js\";\nimport \"./App.css\";\nimport {\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n} from \"@material-ui/core\";\n\ntype CSVRow = { [column: string]: string };\n\nconst config = {\n  displayModeBar: false, // this is the line that hides the bar.\n  staticPlot: true,\n};\n\n// TODO: put a bad url and see how the errr case works\nconst ENDORSEMENTS_URL = `${process.env.PUBLIC_URL}/endorsements.csv`;\nasync function fetchData() {\n  return new Promise(function (resolve, reject) {\n    Plotly.d3.csv(ENDORSEMENTS_URL, function (err: any, rows: any[]) {\n      if (!err) {\n        resolve(rows);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\nfunction mungeData(rows: any, checkboxState: any) {\n  // Base data\n  const data: { [vote: string]: any } = {\n    yes: {\n      x: [],\n      y: [],\n      name: \"yes\",\n      orientation: \"h\",\n      marker: {\n        color: \"#0000FF\",\n        width: 1,\n      },\n      type: \"bar\",\n    },\n    \"-\": {\n      x: [],\n      y: [],\n      name: \"unknown\",\n      orientation: \"h\",\n      type: \"bar\",\n      marker: {\n        color: \"#F4F4F4\",\n        width: 1,\n      },\n    },\n    no: {\n      x: [], // values\n      y: [], // names\n      name: \"no\",\n      orientation: \"h\",\n      type: \"bar\",\n      marker: {\n        color: \"#FFB03B\",\n        width: 1,\n      },\n    },\n  };\n\n  // Modify the base data\n  const items: any = {};\n  for (let i = 0; i < rows.length; i++) {\n    if (!checkboxState[rows[i][\"Endorser\"]]) {\n      continue;\n    }\n\n    Object.keys(rows[i]).forEach((key) => {\n      if (key === \"Endorser\") {\n        // ignore\n        return;\n      }\n\n      if (!items[key]) {\n        // initialize\n        items[key] = {};\n        items[key][\"yes\"] = 0;\n        items[key][\"-\"] = 0;\n        items[key][\"no\"] = 0;\n      }\n\n      const vote = rows[i][key];\n      items[key][vote]++;\n    });\n  }\n  console.log({ items });\n\n  Object.keys(items)\n    .sort()\n    .reverse()\n    .forEach((name) => {\n      const results = items[name];\n      Object.keys(results).forEach((resultType) => {\n        const value = results[resultType];\n        data[resultType][\"x\"].push(value);\n        data[resultType][\"y\"].push(name);\n      });\n    });\n\n  const d = [data[\"no\"], data[\"-\"], data[\"yes\"]];\n  return d;\n}\n\nfunction App() {\n  // read CSV\n  let csvData: CSVRow[];\n  let { data, error } = useAsync({ promiseFn: fetchData });\n  if (!data) {\n    data = [];\n  }\n  // @ts-ignore\n  csvData = data;\n\n  // handle checkboxes\n  const baseState: { [endorser: string]: boolean } = {};\n  const [checkboxState, setCheckboxState] = useState(baseState);\n\n  const handleChange = (event: any) => {\n    setCheckboxState({\n      ...checkboxState,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  const d = mungeData(csvData, checkboxState);\n  console.log({ d });\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Grid container spacing={3}>\n          <Grid item xs={3}>\n            <FormLabel component=\"legend\">Choose Endorsers</FormLabel>\n            <FormGroup>\n              {csvData.map((item) => {\n                const endorser = item[\"Endorser\"];\n                return (\n                  <FormControlLabel\n                    key={endorser}\n                    control={\n                      <Checkbox\n                        checked={!!checkboxState[endorser]}\n                        onChange={handleChange}\n                        name={endorser}\n                        color=\"primary\"\n                      />\n                    }\n                    label={item[\"Endorser\"]}\n                  />\n                );\n              })}\n            </FormGroup>\n          </Grid>\n          <Grid item xs={9}>\n            <Plot\n              data={d}\n              layout={{\n                title: \"Endorsements\",\n                barmode: \"stack\",\n                // TODO: Transition isn't working\n                // transition: {\n                //   duration: 200,\n                //   easing: \"cubic-in-out\",\n                // },\n                width: 1024,\n                height: 768,\n                yaxis: {\n                  automargin: true,\n                },\n              }}\n              config={config}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}